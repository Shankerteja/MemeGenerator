{"version":3,"sources":["components/MemeGenerator/styledComponents.js","components/MemeGenerator/index.js","App.js","index.js"],"names":["MemeContainer","styled","div","withConfig","displayName","componentId","Heading","h1","Heading2","h2","ImageContainer","prop","imageUrl","MemeContent","Para","p","fontSize","FormContainer","form","InputContainer","Label","label","Input","input","Button","button","fontSizesOptionsList","optionId","displayText","MemeGenerator","_Component","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","state","toptext","bottomText","showMeme","imageUrlDisplayed","topTextDisplayed","bottomTextDisplayed","fontSizeDisplayed","submitButton","event","preventDefault","_this$state","console","log","setState","getImage","target","value","getTopText","getBottomText","getFontSize","_inherits","_createClass","key","_this$state2","this","_jsxs","children","_jsx","className","htmlFor","id","type","placeholder","onChange","as","map","eachItem","width","onClick","Component","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35ebdb18.chunk.js","sourcesContent":["// Style your components here\nimport styled from 'styled-components'\n\nexport const MemeContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-height: 100vh;\n`\nexport const Heading = styled.h1`\n  color: #0b69ff;\n  font-family: Roboto;\n  display: block;\n  @media screen and (min-width: 786px) {\n    display: none;\n  }\n`\nexport const Heading2 = styled.h2`\n  display: none;\n  color: #0b69ff;\n  font-family: Roboto;\n  @media screen and (min-width: 786px) {\n    display: block;\n  }\n`\nexport const ImageContainer = styled.div`\n  background-image: url('${prop => prop.imageUrl}');\n  background-size: cover;\n  height: 300px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  @media screen and (min-width: 786px) {\n    width: 500px;\n  }\n`\nexport const MemeContent = styled.div`\n  width: 85%;\n  @media screen and (min-width: 786px) {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n  }\n`\nexport const Para = styled.p`\n  font-family: Roboto;\n  color: white;\n  font-size: ${prop => prop.fontSize}px;\n`\nexport const FormContainer = styled.form`\n  width: 100%;\n  margin-top: 40px;\n  @media screen and (min-width: 786px) {\n    order: -1;\n    width: 400px;\n  }\n`\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n`\n\nexport const Label = styled.label`\n  color: #5a7184;\n  font-family: Open Sans;\n  font-weight: bold;\n`\nexport const Input = styled.input`\n  border: 1px solid #d7dfe9;\n  padding: 10px 14px;\n  margin-top: 7px;\n  border-radius: 5px;\n  outline: none;\n  font-family: Open Sans;\n  width: 100%;\n`\nexport const Button = styled.button`\n  background-color: #0b69ff;\n  color: white;\n  font-weight: bold;\n  border: none;\n  padding: 12px 33px;\n  font-family: Roboto;\n  border-radius: 5px;\n`\n","import {Component} from 'react'\nimport {\n  MemeContainer,\n  Heading,\n  ImageContainer,\n  MemeContent,\n  FormContainer,\n  InputContainer,\n  Label,\n  Input,\n  Button,\n  Para,\n  Heading2,\n} from './styledComponents'\n\nconst fontSizesOptionsList = [\n  {\n    optionId: '8',\n    displayText: '8',\n  },\n  {\n    optionId: '12',\n    displayText: '12',\n  },\n  {\n    optionId: '16',\n    displayText: '16',\n  },\n  {\n    optionId: '20',\n    displayText: '20',\n  },\n  {\n    optionId: '24',\n    displayText: '24',\n  },\n  {\n    optionId: '28',\n    displayText: '28',\n  },\n  {\n    optionId: '32',\n    displayText: '32',\n  },\n]\n\nclass MemeGenerator extends Component {\n  state = {\n    imageUrl: '',\n    toptext: '',\n    bottomText: '',\n    fontSize: fontSizesOptionsList[0].optionId,\n    showMeme: true,\n    imageUrlDisplayed: '',\n    topTextDisplayed: '',\n    bottomTextDisplayed: '',\n    fontSizeDisplayed: fontSizesOptionsList[0].optionId,\n  }\n\n  submitButton = event => {\n    event.preventDefault()\n    const {toptext, bottomText, imageUrl, fontSize} = this.state\n    console.log(toptext)\n    this.setState({\n      topTextDisplayed: toptext,\n      bottomTextDisplayed: bottomText,\n      imageUrlDisplayed: imageUrl,\n      showMeme: true,\n      fontSizeDisplayed: fontSize,\n    })\n  }\n\n  getImage = event => {\n    this.setState({imageUrl: event.target.value})\n  }\n\n  getTopText = event => {\n    this.setState({toptext: event.target.value})\n  }\n\n  getBottomText = event => {\n    this.setState({bottomText: event.target.value})\n  }\n\n  getFontSize = event => {\n    this.setState({fontSize: event.target.value})\n    console.log(event.target.value)\n  }\n\n  render() {\n    const {\n      imageUrlDisplayed,\n      topTextDisplayed,\n      bottomTextDisplayed,\n      fontSizeDisplayed,\n      showMeme,\n    } = this.state\n    return (\n      <MemeContainer>\n        <Heading>Meme Generator</Heading>\n        <MemeContent>\n          {showMeme ? (\n            <ImageContainer imageUrl={imageUrlDisplayed} data-testid=\"meme\">\n              <Para fontSize={fontSizeDisplayed}>{topTextDisplayed}</Para>\n              <Para fontSize={fontSizeDisplayed}>{bottomTextDisplayed}</Para>\n            </ImageContainer>\n          ) : null}\n          <FormContainer>\n            <Heading2 className=\"heading2\">Meme Generator</Heading2>\n            <InputContainer>\n              <Label htmlFor=\"image\">Image Url</Label>\n              <Input\n                id=\"image\"\n                type=\"text\"\n                placeholder=\"Enter the Image URL\"\n                onChange={this.getImage}\n              />\n            </InputContainer>\n            <InputContainer>\n              <Label htmlFor=\"top\">Top Text</Label>\n              <Input\n                id=\"top\"\n                type=\"text\"\n                placeholder=\"Enter the top text\"\n                onChange={this.getTopText}\n              />\n            </InputContainer>\n            <InputContainer>\n              <Label htmlFor=\"bottom\">Bottom Text</Label>\n              <Input\n                type=\"text\"\n                placeholder=\"Enter the bottom text\"\n                onChange={this.getBottomText}\n                id=\"bottom\"\n              />\n            </InputContainer>\n            <InputContainer>\n              <Label htmlFor=\"font\">Font Size</Label>\n              <Input\n                as=\"select\"\n                onChange={this.getFontSize}\n                id=\"font\"\n                value={fontSizeDisplayed}\n              >\n                {fontSizesOptionsList.map(eachItem => (\n                  <option\n                    value={eachItem.optionId}\n                    width=\"100%\"\n                    key={eachItem.optionId}\n                  >\n                    {eachItem.displayText}\n                  </option>\n                ))}\n              </Input>\n            </InputContainer>\n            <Button type=\"submit\" onClick={this.submitButton}>\n              Generate\n            </Button>\n          </FormContainer>\n        </MemeContent>\n      </MemeContainer>\n    )\n  }\n}\nexport default MemeGenerator\n","import MemeGenerator from './components/MemeGenerator'\n\nimport './App.css'\n\nconst App = () => <MemeGenerator />\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}